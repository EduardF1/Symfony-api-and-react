# config/packages/security.yaml
security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        # use your user class name here
        App\Entity\User:
            # Use native password hasher, which auto-selects the best
            # possible hashing algorithm (starting from Symfony 5.3 this is "bcrypt")
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
    #    users_in_memory: { memory: null }
        database:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            lazy: true
            json_login:
                # Here authentication will happen (token generation)
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
               authenticators:
               #        - lexik_jwt_authentication.jwt_token_authenticator
                         - App\Security\TokenAuthenticator
            user_checker: App\Security\UserEnabledChecker

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # To get a token change the role for ^/api to IS_AUTHENTICATED_ANONYMOUSLY
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
    role_hierarchy:
        ROLE_WRITER: ROLE_COMMENTATOR
        ROLE_ADMIN: [ROLE_WRITER, ROLE_EDITOR]
        ROLE_SUPERADMIN: ROLE_ADMIN
